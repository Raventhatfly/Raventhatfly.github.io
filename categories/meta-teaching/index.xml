<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Meta-Teaching - Category - Feiyang Wu Personal Page</title><link>https://Raventhatfly.github.io/categories/meta-teaching/</link><description>Meta-Teaching - Category | Feiyang Wu Personal Page</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>raventhatfly@gmail.com (Feiyang Wu)</managingEditor><webMaster>raventhatfly@gmail.com (Feiyang Wu)</webMaster><lastBuildDate>Wed, 15 May 2024 09:15:14 -0500</lastBuildDate><atom:link href="https://Raventhatfly.github.io/categories/meta-teaching/" rel="self" type="application/rss+xml"/><item><title>Lecture2</title><link>https://Raventhatfly.github.io/posts/bd7db78/</link><pubDate>Wed, 15 May 2024 09:15:14 -0500</pubDate><author>Feiyang Wu</author><guid>https://Raventhatfly.github.io/posts/bd7db78/</guid><description><![CDATA[<h1 id="c--c-编译原理" class="heading-element"><span>C / C++ 编译原理</span>
  <a href="#c--c-%e7%bc%96%e8%af%91%e5%8e%9f%e7%90%86" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h1><h3 id="需要提前掌握的基础知识" class="heading-element"><span>需要提前掌握的基础知识</span>
  <a href="#%e9%9c%80%e8%a6%81%e6%8f%90%e5%89%8d%e6%8e%8c%e6%8f%a1%e7%9a%84%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li>比特和字节的关系，8bit = 1B</li>
<li>十六进制数的表达方式以及十六进制数和二进制数的转换
<ul>
<li>例子：0x2f = 00101111</li>
</ul>
</li>
</ul>
<h3 id="预习内容" class="heading-element"><span>预习内容</span>
  <a href="#%e9%a2%84%e4%b9%a0%e5%86%85%e5%ae%b9" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><h3 id="1-中央处理器cpu架构" class="heading-element"><span>1. 中央处理器（CPU）架构</span>
  <a href="#1-%e4%b8%ad%e5%a4%ae%e5%a4%84%e7%90%86%e5%99%a8cpu%e6%9e%b6%e6%9e%84" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><h5 id="内存" class="heading-element"><span>内存</span>
  <a href="#%e5%86%85%e5%ad%98" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h5><p>内存是计算机的存储空间。</p>
<p>对于很多没有接触过计算机的人来说，内存=硬盘。其实这种理解是错误的。内存掉电会丢失内容，而
硬盘在掉电之后信息不会丢失。但是内存的访问速度比硬盘快，因此实际上在电脑启动时操作系统的代码
会从硬盘上搬迁到内存里。平时打开的文件也是如此。</p>
<p>内存地址的基本单位是字节。一个字节=8比特。对于32位计算机，其寻址能力为32位，意思是有2^32个
地址。大部分计算机是字节寻址，即一个地址对应一个字节的数据（ECE120涉及的LC3是16位机，但是
一个地址对应2B两个字节的数据）。</p>
<h5 id="其他" class="heading-element"><span>其他</span>
  <a href="#%e5%85%b6%e4%bb%96" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h5><p>交给ECE120去学吧。</p>
<h3 id="2-编译流程" class="heading-element"><span>2. 编译流程</span>
  <a href="#2-%e7%bc%96%e8%af%91%e6%b5%81%e7%a8%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><h4 id="常见概念" class="heading-element"><span>常见概念</span>
  <a href="#%e5%b8%b8%e8%a7%81%e6%a6%82%e5%bf%b5" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>头文件<code>.h</code>包含了函数声明、宏定义等。在C++当中还会存放类。<code>.c</code>文件中存放源代码。</p>
<h4 id="具体流程" class="heading-element"><span>具体流程</span>
  <a href="#%e5%85%b7%e4%bd%93%e6%b5%81%e7%a8%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><h5 id="a预处理阶段" class="heading-element"><span>(a)预处理阶段</span>
  <a href="#a%e9%a2%84%e5%a4%84%e7%90%86%e9%98%b6%e6%ae%b5" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h5><p>预处理阶段，其实用朴素的话语来讲就是对宏（Macro）进行文本替换或展开。例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在预处理完成之后，这段代码会被直接替换位<code>stdio.h</code>头文件包含的内容。
再例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="cp">#define GPIO_DEVICE_ID 1</span></span></span></code></pre></td></tr></table>
</div>
</div><p>代码里所有出现的<code>GPIO_DEVICE_ID</code>将被替换为1。</p>
<div class="details admonition tip open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-lightbulb fa-fw" aria-hidden="true"></i>注意<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">当使用<code>#include</code>之后，就可以使用头文件里的宏。除非是编译器定义的宏，否则可能会无法被找到。</div>
    </div>
  </div>
<h5 id="b编译阶段" class="heading-element"><span>(b)编译阶段</span>
  <a href="#b%e7%bc%96%e8%af%91%e9%98%b6%e6%ae%b5" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h5><p>将所有预处理之后的C/C++代码翻译成汇编语言(汇编文件一般以<code>.s</code>,<code>.asm</code>为后缀，将会在ECE120
后期课程涉及)。</p>
<h5 id="c汇编阶段" class="heading-element"><span>(c)汇编阶段</span>
  <a href="#c%e6%b1%87%e7%bc%96%e9%98%b6%e6%ae%b5" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h5><p>将汇编语言翻译成计算机可执行的二进制文件(生成若干<code>.o</code>，<code>.obj</code>文件)。每个独立的二进制文件
由于不知道相互之间的关系，现在还无法独立运行。</p>
<h5 id="d链接阶段" class="heading-element"><span>(d)链接阶段</span>
  <a href="#d%e9%93%be%e6%8e%a5%e9%98%b6%e6%ae%b5" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h5><p>这个阶段是最令人头大阶段。链接过程将多个目标文以及所需的库文件(.so等)链接成最终的可执行文件
(executable file)。该过程较为复杂，希望详细了解可以阅读<a href="https://zhuanlan.zhihu.com/p/88255667"target="_blank" rel="external nofollow noopener noreferrer">知乎文章</a>。
通俗易懂的讲法，就是把每个C/C++文件生成的二进制文件，或者一些厂商（例如Windows）提供的
二进制文件（即静态与动态链接库，常见后缀<code>.so</code>，<code>.lib</code>，<code>.a</code>）组装在一起。</p>
<p><strong>静态链接库</strong>：当要使用时，连接器(linker)会找出程序所需的函数，然后将它们拷贝到执行文件，
由于这种拷贝是完整的，所以一旦连接成功，静态程序库也就不再需要了。</p>
<p><strong>动态库链接库</strong>：某个程序在运行中要调用某个动态链接库函数的时候，操作系统首先会查看所有正在运行的程序，看在内存里是否已有此库函数的拷贝了。
如果有，则让其共享那一个拷贝；只有没有才链接载入</p>
<p><strong>常见错误</strong>：</p>
<p>如果使用一个函数但没有定义它（大部分时候有可能是函数单纯打错了）：
<div class="details admonition failure open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-times-circle fa-fw" aria-hidden="true"></i>Failure<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">link_example.c:(.text+0xe): undefined reference to `foo'
collect2.exe: error: ld returned 1 exit status</div>
    </div>
  </div></p>
<p>如果链接器发现了两个不同的二进制文件中有相同的全局变量或函数，连接器会这么报错：
<div class="details admonition failure open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-times-circle fa-fw" aria-hidden="true"></i>Failure<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">/tmp/ccIa32rv.o:(.bss+0x0): multiple definition of <code>head'/tmp/ccAvumDO.o:(.bss+0x0): first defined here /tmp/ccuVImET.o:(.bss+0x0): multiple definition of </code>head'
/tmp/ccAvumDO.o:(.bss+0x0): first defined here
collect2: error: ld returned 1 exit status</div>
    </div>
  </div></p>
<h3 id="3-编译脚本" class="heading-element"><span>3. 编译脚本</span>
  <a href="#3-%e7%bc%96%e8%af%91%e8%84%9a%e6%9c%ac" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>脚本(sript)就是把一些命令放在一个文件里，这样在执行的时候不需要一条条手动输入而是一次性
全部执行的一个文件。</p>
<p>编程语言也主要分为两种：编译语言与脚本语言。脚本语言的每一条代码逐条投喂至解释器，并理解
翻译成二进制代码供CPU执行。而编译语言将全部代码全部翻译为二进制代码之后才能供CPU执行。
最常见的脚本语言是Python。最典型的编译语言即为C和C++。</p>
<h4 id="makefile" class="heading-element"><span>Makefile</span>
  <a href="#makefile" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>Makefile 是一个用于管理项目构建的文件，通常用于编译和链接程序，特别是在大型项目中。
它通过定义一系列规则和目标，自动化了编译和构建过程，从而避免了手动输入复杂的编译命令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Makefile" data-lang="Makefile"><span class="line"><span class="cl"><span class="c"># 定义变量
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nv">CC</span> <span class="o">=</span> gcc
</span></span><span class="line"><span class="cl"><span class="nv">CFLAGS</span> <span class="o">=</span> -Wall -g
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 定义目标文件
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nv">TARGET</span> <span class="o">=</span> myprogram
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 定义依赖关系和规则
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nf">$(TARGET)</span><span class="o">:</span> <span class="n">main</span>.<span class="n">o</span> <span class="n">utils</span>.<span class="n">o</span>
</span></span><span class="line"><span class="cl">    <span class="k">$(</span>CC<span class="k">)</span> <span class="k">$(</span>CFLAGS<span class="k">)</span> -o <span class="k">$(</span>TARGET<span class="k">)</span> main.o utils.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">main.o</span><span class="o">:</span> <span class="n">main</span>.<span class="n">c</span>
</span></span><span class="line"><span class="cl">    <span class="k">$(</span>CC<span class="k">)</span> <span class="k">$(</span>CFLAGS<span class="k">)</span> -c main.c
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">utils.o</span><span class="o">:</span> <span class="n">utils</span>.<span class="n">c</span>
</span></span><span class="line"><span class="cl">    <span class="k">$(</span>CC<span class="k">)</span> <span class="k">$(</span>CFLAGS<span class="k">)</span> -c utils.c
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 伪目标，用于清理构建文件
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nf">.PHONY</span><span class="o">:</span> <span class="n">clean</span>
</span></span><span class="line"><span class="cl"><span class="nf">clean</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    rm -f <span class="k">$(</span>TARGET<span class="k">)</span> *.o
</span></span></code></pre></td></tr></table>
</div>
</div><p>找到项目的Makefile文件，打开终端输入：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">make</span></span></code></pre></td></tr></table>
</div>
</div><p><code>make</code>将根据Makefile生成<code>gcc</code>指令。例如上述代码的运行路径为中的文件有：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">my_project/
</span></span><span class="line"><span class="cl">├── Makefile
</span></span><span class="line"><span class="cl">├── main.cpp
</span></span><span class="line"><span class="cl">└── utils.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>$(CC)会被翻译成gcc，$(CFLAGS)会被翻译成-Wall -g。-o 我们在之前介绍过，是输出的意思。
所以如果输入<code>make myprogram</code>实际上相当于输入了以下的gcc指令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -Wall -g -c main.c <span class="c1"># 将main.c编译为main.o</span>
</span></span><span class="line"><span class="cl">gcc -Wall -g -c utils.c
</span></span><span class="line"><span class="cl">gcc -Wall -g -o myprogram main.o utils.o <span class="c1"># 通过.o文件生成myprogram可执行文件</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="cmake" class="heading-element"><span>CMake</span>
  <a href="#cmake" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h4><p>CMake 是一个跨台的构建系统，它用于管理项目的编译过程，生成特定于平台的构建文件（如
Makefile、Visual Studio 项目文件等）。CMake 通过一种高级脚本语言来描述构建过程，
能够更好地处理复杂的构建需求，并且在不同平台之间保持一致性。在我们的项目中我们一般使用
Cmake来生成Makefile。</p>
<p>假设现在我们的项目文件夹为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">my_project/
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── main.cpp
</span></span><span class="line"><span class="cl">└── utils.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p><code>CMakeLists.txt</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cmake" data-lang="cmake"><span class="line"><span class="cl"><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span> <span class="s">3.10</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 项目信息
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">project</span><span class="p">(</span><span class="s">MyProject</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 设置 C++ 标准
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_STANDARD</span> <span class="s">11</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="s">True</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># 添加可执行文件
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nb">add_executable</span><span class="p">(</span><span class="s">MyProject</span> <span class="s">main.cpp</span> <span class="s">utils.cpp</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后运行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..  <span class="c1"># .. 表示上一级目录，这里的意思是Cmakelists.txt在上一级目录</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后我们就能在build文件夹中找到Makefile了。此时我们就能运行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">make</span></span></code></pre></td></tr></table>
</div>
</div><p>我们就能得到想要的二进制可执行文件了。</p>
<h3 id="课后作业" class="heading-element"><span>课后作业</span>
  <a href="#%e8%af%be%e5%90%8e%e4%bd%9c%e4%b8%9a" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><ul>
<li>使用Makefile和Cmake成功编译文件。</li>
<li>继续观看黑马程序员教学视频。</li>
</ul>
<hr class="awesome-hr">]]></description></item><item><title>Lecture1</title><link>https://Raventhatfly.github.io/posts/574de11/</link><pubDate>Sun, 12 May 2024 23:10:35 -0500</pubDate><author>Feiyang Wu</author><guid>https://Raventhatfly.github.io/posts/574de11/</guid><description><![CDATA[<h2 id="meta-战队电控培训第一讲讲义" class="heading-element"><span>META 战队电控培训【第一讲】讲义</span>
  <a href="#meta-%e6%88%98%e9%98%9f%e7%94%b5%e6%8e%a7%e5%9f%b9%e8%ae%ad%e7%ac%ac%e4%b8%80%e8%ae%b2%e8%ae%b2%e4%b9%89" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><h3 id="1-预习内容" class="heading-element"><span>1. 预习内容</span>
  <a href="#1-%e9%a2%84%e4%b9%a0%e5%86%85%e5%ae%b9" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>C 语言：B站黑马程序员（不建议下载使用Visual Studio，我们将不会用到它。如果教程用到了Clion，可以先开始下载。这次不做要求。推荐使用 Vscode,我们前期将使用gcc编译器进行编译C语言代码。Vscode安装参见：<a href="https://code.visualstudio.com/"target="_blank" rel="external nofollow noopener noreferrer">https://code.visualstudio.com/</a>。</p>
<p>第一讲大家请自行学习P1~P24有关章节的知识。</p>
<p>黑马程序员课程链接点击<a href="https://www.bilibili.com/video/BV1Xa4y1k7LU?p=14&amp;vd_source=b710c0374cb950d2cc5713ef9df39177"target="_blank" rel="external nofollow noopener noreferrer">此处</a>。</p>
<h3 id="2-linux基本操作" class="heading-element"><span>2. Linux基本操作</span>
  <a href="#2-linux%e5%9f%ba%e6%9c%ac%e6%93%8d%e4%bd%9c" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><h5 id="a-终端" class="heading-element"><span>(a) 终端</span>
  <a href="#a-%e7%bb%88%e7%ab%af" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h5><p>终端（Terminal）是一台电脑或者计算机系统，用来让用户输入数据，及显示其计算结果的机器，简而言之就是人类用户与计算机交互的设备。</p>
<p>Windows 终端（Powershell）: 按下Win徽标+R，输入powershell。
Mac: 自行上网查阅如何打开终端。</p>
<h5 id="b-linux命令基本用法" class="heading-element"><span>(b) Linux命令基本用法</span>
  <a href="#b-linux%e5%91%bd%e4%bb%a4%e5%9f%ba%e6%9c%ac%e7%94%a8%e6%b3%95" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h5><p>熟悉并掌握Linux常用指令的用法。
Linux指令语法结构：
<code>[tyang3@localhost Desktop]$ command [-options] [arguments]</code></p>
<p>command 命令：表示命令的名称，如<code>cd</code> <code>ls</code> <code>mkdir</code>等，实质是一个可执行的二进制程序</p>
<p>options 选项：定义命令的执行特性，中刮号[]并不存在于实际的指令中，而加入选项设定时，通常选项前会带 - 号或&ndash;号，有两种长短选项</p>
<p>短选项：用-引导，后面跟单个字符，如 -a、-l、-h等</p>
<p>多个短选项可以组合使用，效果和几个短选项一样，如-a –l -h===-alh</p>
<p>长选项：用&ndash;引导，后面跟完整的单词，如—help</p>
<p>arguments 参数：表示命令的作用对象，可以有多个参数，通常情况可以是文件名、目录、或用户名。</p>
<p>来源：<a href="https://zhuanlan.zhihu.com/p/33331219"target="_blank" rel="external nofollow noopener noreferrer">https://zhuanlan.zhihu.com/p/33331219</a></p>
<h3 id="3-环境变量和mingw编译器安装" class="heading-element"><span>3. 环境变量和MinGW编译器安装</span>
  <a href="#3-%e7%8e%af%e5%a2%83%e5%8f%98%e9%87%8f%e5%92%8cmingw%e7%bc%96%e8%af%91%e5%99%a8%e5%ae%89%e8%a3%85" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><h5 id="a环境变量" class="heading-element"><span>(a)环境变量</span>
  <a href="#a%e7%8e%af%e5%a2%83%e5%8f%98%e9%87%8f" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h5><p>环境变量（environment variables）一般是指在操作系统中用来指定操作系统运行环境的一些参数，如：临时文件夹位置和系统文件夹位置等。</p>
<p>如果在终端输入一个命令（command），上面我们所说command实际上是一个二进制的可执行文件。那终端怎么知道这个二进制文件该去如何找到呢？</p>
<p>比如，现在打开windows终端，输入gcc, 按下回车，只会出现报错信息。但是当我将gcc.exe所在的文件夹加入环境变量之后，输入gcc之后终端就能运行gcc这个二进制可执行文件命令。</p>
<h5 id="bmingw编译器安装" class="heading-element"><span>(b)MinGW编译器安装</span>
  <a href="#bmingw%e7%bc%96%e8%af%91%e5%99%a8%e5%ae%89%e8%a3%85" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h5><p>（Mac和Linux用户可忽略此步，因为Mac和Linux自带gcc编译器）</p>
<p>接下来是windows MinGW编译器安装方法：
下载：<a href="https://sourceforge.net/projects/mingw/files/latest/download"target="_blank" rel="external nofollow noopener noreferrer">https://sourceforge.net/projects/mingw/files/latest/download</a></p>
<p>安装完成之后，找到安装位置，我们发现里面有一个bin文件夹：</p>
<p class="custom-center"><img loading="lazy" src="/figures/bin.png" alt="图片" srcset="/figures/bin.png?size=small, /figures/bin.png?size=medium 1.5x, /figures/bin.png?size=large 2x" data-title="图片" style="--width: 1156px;--aspect-ratio: 1156 / 613;background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
<p>来源：<a href="https://baike.baidu.com/item/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/1730949"target="_blank" rel="external nofollow noopener noreferrer">https://baike.baidu.com/item/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/1730949</a></p>
<p>在windows上搜索环境变量，打开后，点击环境变量：</p>
<p class="custom-center"><img loading="lazy" src="/figures/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="环境变量" srcset="/figures/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png?size=small, /figures/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png?size=medium 1.5x, /figures/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png?size=large 2x" data-title="环境变量" style="--width: 741px;--aspect-ratio: 741 / 829;background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
<p>点击环境变量中的Path:</p>
<p class="custom-center"><img loading="lazy" src="/figures/path.png" alt="path" srcset="/figures/path.png?size=small, /figures/path.png?size=medium 1.5x, /figures/path.png?size=large 2x" data-title="path" style="--width: 942px;--aspect-ratio: 942 / 907;background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
<p>点击新建，把刚才MinGW那个带bin的路径给输入进来：</p>
<p class="custom-center"><img loading="lazy" src="/figures/bin2.png" alt="bin" srcset="/figures/bin2.png?size=small, /figures/bin2.png?size=medium 1.5x, /figures/bin2.png?size=large 2x" data-title="bin" style="--width: 817px;--aspect-ratio: 817 / 787;background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
<div class="details admonition tip open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-lightbulb fa-fw" aria-hidden="true"></i>注意<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">退出的时候所有窗口都要点击确定！不要直接把窗口叉掉！</div>
    </div>
  </div>
<p>bin是binary的缩写，也就是二进制文件。bin文件夹中包含我们将用到的大部分可执行二进制文件，包括gcc。现在这些可执行文件都能被终端找到了。
如果打开bin文件夹，可以找到以下的exe文件，现在这些.exe可执行文件都可以被终端直接执行。</p>
<p class="custom-center"><img loading="lazy" src="/figures/bin3.png" alt="bin" srcset="/figures/bin3.png?size=small, /figures/bin3.png?size=medium 1.5x, /figures/bin3.png?size=large 2x" data-title="bin" style="--width: 1093px;--aspect-ratio: 1093 / 1087;background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
<p>Win+R 输入powershell打开终端，输入gcc得到一下结果：</p>
<p class="custom-center"><img loading="lazy" src="/figures/gcc-out.png" alt="bin" srcset="/figures/gcc-out.png?size=small, /figures/gcc-out.png?size=medium 1.5x, /figures/gcc-out.png?size=large 2x" data-title="bin" style="--width: 519px;--aspect-ratio: 519 / 85;background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
<p>证明结果正确（fatal error的原因只是因为没有待编译的c文件输入而已）。</p>
<h5 id="c-gcc编译c语言源文件" class="heading-element"><span>(c) gcc编译C语言源文件</span>
  <a href="#c-gcc%e7%bc%96%e8%af%91c%e8%af%ad%e8%a8%80%e6%ba%90%e6%96%87%e4%bb%b6" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h5><p>要编译单个.c文件，我们可以采取如下方法。
首先，找到.c文件的所在位置，使用终端的cd指令（不知道什么叫cd命令的去网上搜）。假设我想编译<code>prime.c</code>，那么Windows用户将输入：
<code>gcc prime.c -o prime.exe</code>
Mac\Linux用户请输入：
<code>gcc prime.c -o prime</code>
prime.c是告诉gcc我想编译哪个文件，-o指的是输出文件名。</p>
<p class="custom-center"><img loading="lazy" src="/figures/teach1.png" alt="bin" srcset="/figures/teach1.png?size=small, /figures/teach1.png?size=medium 1.5x, /figures/teach1.png?size=large 2x" data-title="bin" style="--width: 958px;--aspect-ratio: 958 / 31;background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
<p>之后文件夹中会多出一个叫prime.exe的二进制可执行文件。
Windows运行该可执行文件只需输入：
<code>.\prime.exe</code>
Mac\Linux请输入：
<code>.\prime</code>
可执行文件即可被执行完成。由于prime.c的功能是输出1~100中所有的质数，被打印的质数将会在终端中显示。</p>
<p class="custom-center"><img loading="lazy" src="/figures/prime.png" alt="bin" srcset="/figures/prime.png?size=small, /figures/prime.png?size=medium 1.5x, /figures/prime.png?size=large 2x" data-title="bin" style="--width: 787px;--aspect-ratio: 787 / 780;background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
<h3 id="4--uiuc-vpn安装" class="heading-element"><span>4.  UIUC VPN安装</span>
  <a href="#4--uiuc-vpn%e5%ae%89%e8%a3%85" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>由于我们将用github管理仓库，而国内连接github并不稳定，请大家尽快安装UIUC VPN。请根据自己的电脑
配置和操作系统选择合适的链接安装。
VPN下载：<a href="https://answers.uillinois.edu/illinois/98773"target="_blank" rel="external nofollow noopener noreferrer">https://answers.uillinois.edu/illinois/98773</a></p>
<p>安装完成之后输入：</p>
<p class="custom-center"><img loading="lazy" src="/figures/vpn1.png" alt="/figures/vpn1.png" srcset="/figures/vpn1.png?size=small, /figures/vpn1.png?size=medium 1.5x, /figures/vpn1.png?size=large 2x" data-title="/figures/vpn1.png" style="--width: 622px;--aspect-ratio: 622 / 307;background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
<p>输入NetID和密码之后，切记选择通道3，否则无法正常访问外网。</p>
<h3 id="5-c语言基础语法" class="heading-element"><span>5. C语言基础语法</span>
  <a href="#5-c%e8%af%ad%e8%a8%80%e5%9f%ba%e7%a1%80%e8%af%ad%e6%b3%95" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>自行查阅预习内容。应掌握的内容为：P1-P24
应掌握的概念：注释、常量、关键字、变量、字符类型、标识符、数据类型、if语句</p>]]></description></item></channel></rss>